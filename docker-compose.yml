#Below, version of docker compose that we're going to be using
version: "3.9"

#Docker compose file typically comprises of one or more services that's needed for your application
services:
  #app is the service that's going to run our docker file
  app:
    #build: context: . build the docker file inside of our current directory
    build:
      context: .
      args:
        - DEV=true
      #maps port 8000 on local machine to 8000 on the container - this is how we can access the network when connecting to server
    ports:
      - "8000:8000"
      #how we map directories from our system into container. Here we're mapping app dir we created in project to /app in container
      #Changes/updates made in local project reflected in running container in realtime. We don't want to rebuild image just for this
    volumes:
      - ./app:/app
      #Command used to run the service. We can override this command we we run docker-compose run. This command here will be default
      #if no command is specified with docker-compose run
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate && 
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
    depends_on:
      - db

  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      #create env variables - sets initial db configuration for new db service. This is only for local dev server and isn't
      #used for production
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme

volumes:
  dev-db-data:
